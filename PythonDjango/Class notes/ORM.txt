~*~*ORM*~
ORM = object relational mapper tied into bottles... classes we will be writing
 ORMs are used to create a language-specific object oriented representation of a table. When tables are objects, attributes of these objects represent the columns in the database, while methods will correspond to common queries.

The reason that ORMs are useful is so that we can write pure Python code without having to manage long SQL query strings in our logic.  Given clearly named table methods our code becomes much more clear and easy to read with the help of an ORM.

*~*~*Models in the MVC Structure*~*~*~
models.py
create 3 classes in a singular form.

Comment.objects().first().blog
blog.objects().first().comments
will have to do migration.

CMD
>python mnage.py makemigrations
>python manage.py migrate

creates new files under "migrations" file.

 skinny controllers and fat models

Any heavy logic including database queries is the purview of a Model. If a Controller (in Django's case, a View) needs to perform logic or get information from a database, it should use a Model method to do so.

models.py
many to many relationship of blogs, admins, comments

 from __future__ import unicode_literals
  from django.db import models
  # Create your models here.
  class Blog(models.Model):
      name = models.CharField(max_length=255)
      desc = models.TextField()
      created_at = models.DateTimeField(auto_now_add = True)
      updated_at = models.DateTimeField(auto_now = True)
  class Comment(models.Model):
      comment = models.CharField(max_length=255)
      created_at = models.DateTimeField(auto_now_add = True)
      updated_at = models.DateTimeField(auto_now = True)
      # Notice the association made with ForeignKey for a one-to-many relationship
      # There can be many comments to one blog
      blog = models.ForeignKey(Blog, related_name = "comments")
  class Admin(models.Model):
      first_name = models.CharField(max_length=255)
      last_name = models.CharField(max_length=255)
      email = models.CharField(max_length=255)
      blogs = models.ManyToManyField(Blog, related_name = "admins")
      created_at = models.DateTimeField(auto_now_add = True)
      updated_at = models.DateTimeField(auto_now = True)


~*Column types*~
You can find a full list of allowed column types in the documentation, but here are some of the main ones you'll be using.

~*CharField*~
Any text that a user may enter. This has one additional required parameter, max_length, that (unsurprisingly) is the maximum length of text that can be saved.
TextField
Like a CharField, but with no maximum length. Your user could copy the entire text of Atlas Shrugged into the field, and it would save in the database correctly.
IntegerField, BooleanField
Holds integers or booleans, respectively
DateTimeField
Used for date and times, such as timestamps or when a flight is scheduled to depart. This field can take two very useful optional parameters, auto_now_add=True, which adds the current date/time when object is created, and auto_now=True, which automatically updates any time the object is modified.
ForeignKey, ManyToManyField, OneToOneField
Used to indicate a relationship between models (anything that would require a JOIN statement in SQL). ForeignKey is for one-to-many relationships and goes in the model on the "many" side, just as the foreign key column goes in the SQL table on the "many" side.

~*~*Migrations*~*~= kind of like forward engineering in mysql workbench
 > python manage.py makemigrations
  > python manage.py migrate

Never delete migration files, and always makemigrations and migrate anytime you change something in your models.py files 

Django ORM models and queries will always be the same no matter which database we are using.

summary: build model--> migrate> translate code to SQL.
~*~*~*~*~*

