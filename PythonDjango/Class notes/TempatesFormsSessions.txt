static content
*~*~*Templates*~*~*  
# views.py
  from django.shortcuts import render, HttpResponse, redirect
  def index(request):
    context = {
        "email" : "blog@gmail.com",
        "name" : "mike"
    }
    return render(request, "ourApp/index.html", context)

<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title></title>
        {% load static %}
      <!-- The line above tells Django to be ready to listen for static files -->
      <link rel="stylesheet" href="{% static 'ourApp/css/main.css' %}" media="screen" title="no title"  charset="utf-8">
      <!-- Put the static files in the static folder inside your app.  Django collects files within all static folders and puts them within a single folder -->    
      </head>
    <body>
        <h1>Hello World!</h1>
        {{email}} and {{name}}
    </body>
  </html>

~*~*~*form and submission*~*~*~*
	~*~*~*Form Data*~*~*~*
<form action="/blogs/create" method="post">
	{% csrf_token %}
	Blog Name: <input type="text" name="name" placeholder="blog name">
    Description: <textarea name="desc" placeholder="description"></textarea>
	<input type="submit" value="submit">
</form>

Don't forget to add the new url to ./blogs/urls.py:

url(r'^create$', views.create)

In ./blogs/views.py

from django.shortcuts import render, HttpResponse, redirect
def create(request):
	if request.method == "POST":
		print "*"*50
		print request.POST
        print request.POST['name']
        print request.POST['desc']
        request.session['name'] = "test"  # more on session below
		print "*"*50
		return redirect("/")
	else:
		return redirect("/")

~*~*Key Terms
request.POST
Data from POST request
request.GET
Data from GET request
request.method
Returns the method/HTTP verb associated with the request
{% csrf_token %}
Prevents cross-site request forgery (place it in a form on the HTML/template side of your project)

~*~*Session*~*~*
In our terminal, head to the directory where manage.py resides and run the following commands:

  # Need to be in same directory as manage.py file
  > python manage.py makemigrations
  > python manage.py migrate

 request.session # It's a dictionary, so you can attach key/value pairs

request.session['name'] = request.POST['name']
request.session['counter'] = 100

In the html file, Django lets you directly access request.session.  For example to access request.session['name'], simply do:

{{request.session.name}}

~*~*~*Useful session methods**!*!*!*!*

Session in Django gets saved even if we leave the browser!

Useful session methods:
request.session['key']
This will retrieve (get) the value stored in key
request.session['key'] = 'value'
Set the value that will be stored by key
del request.session['key']
Deletes a session key if it exists, throws a keyError if it doesn’t. Use along with try and except since it’s better to ask for forgiveness than permission
'key' in request.session
Returns a boolean of whether a key is in session or not
{{ request.session.name }}
Use dot notation (.) to access request.session keys from templates since square brackets ([]) aren’t allowed there

