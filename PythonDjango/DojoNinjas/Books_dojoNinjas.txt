python manage.py makemigrations
python manage.py migrate
python manage.py shell
from apps.book_authors.models import *

Create 5 books with the following names: C sharp, Java, Python, PHP, Ruby

Book.objects.create(name="C sharp", desc="not flat")
Book.objects.create(name="Java", desc="not coffee")
Book.objects.create(name="Python", desc="not a snake")
Book.objects.create(name="PHP", desc="not a TLA")
Book.objects.create(name="Ruby", desc="not an emerald")

Create 5 different authors: Mike, Speros, John, Jadee, Jay
Author.objects.create(first_name="Mike", last_name="ike", email="mike@ike.com")
Author.objects.create(first_name="Speros", last_name="peros", email="speros@peros.com")
Author.objects.create(first_name="John", last_name="ohn", email="john@ohn.com")
Author.objects.create(first_name="Jadee", last_name="adee", email="jadee@adee.com")
Author.objects.create(first_name="Jay", last_name="ay", email="jay@ay.com")

Add a new field in the authors table called 'notes'.  Make this a TextField.  Successfully create and run the migration files.

Adding column
python manage.py makemigrations
python manage.py migrate
python manage.py shell
from apps.book_authors.models import *

Change the name of the 5th book to C#
Book.objects.get(id=5)
(saw Ruby as the book)
book = Book.objects.get(id=5)
book.name="C#"
book.save()

Change the first_name of the 5th author to Ketul
author=Author.objects.get(id=5)
author.first_name="Ketul"
author.save()

>>> Author.objects.get(id=5)
<Author: name = Ketul ay>

Assign the first author to the first 2 books
Author.objects.get(id=1) or Author.objects.first()
Book.objects.first() or Book.objects.all()[0]
Book.objects.all()[1]

author1 = Author.objects.first()
book1 = Book.objects.first()
book2 = Book.objects.all()[1]

author1.books.add(book1)
author1.books.add(book2)

Assign the second author to the first 3 books

author2 = Author.objects.all()[1]
book3 = Book.objects.all()[2]

author2.books.add(book1)
author2.books.add(book2)
author2.books.add(book3)

Assign the third author to the first 4 books
author3 = Author.objects.all()[2]
book4 = Book.objects.all()[3]

author3.books.add(book1)
author3.books.add(book2)
author3.books.add(book3)
author3.books.add(book4)

Assign the fourth author to the first 5 books (or in other words, all the books)
author4 = Author.objects.all()[3]
book5 = Book.objects.all()[4]

author4.books.add(book1)
author4.books.add(book2)
author4.books.add(book3)
author4.books.add(book4)
author4.books.add(book5)

For the 3rd book, retrieve all the authors
book3.authors.all()
Book.objects.all()[2].authors.all()
Book.objects.get(id=3).authors.all()

For the 3rd book, remove the first author
to_be_deleted_author = book3.authors.first()
to_be_deleted_author.delete()

For the 2nd book, add the 5th author as one of the authors
Book.objects.get(id=2).authors.add(Author.objects.get(id=5))

Find all the books that the 3rd author is part of
Author.objects.get(id=3).books.all()

Find all the books that the 2nd author is part of
Author.objects.get(id=2).books.all()
