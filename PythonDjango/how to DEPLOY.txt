How to set up python deployment
STEP 1: Getting started
1.	Virtual environment
a.	Desktop>pythonstuff>pythonDjango>MyEnvironments
b.	call djangoEnv/scripts/activate
2.	CD into project directory
3.	Save all of my installed pip modules into a txt file. (WHAT?!)
a.	pip freeze > requirements.txt
remove pygraphviz, pydot and anything with MySQL in it. 

STEP 2: Committing.
Initialize new git repo. ï¿½ outer project folder, same level as manage.py.
1.	Create .gitignore file
a.	Nul> .gitignore
2.	Open your .gitignore file in your text editor and add the lines:
  *.pyc
  venv/
3.	Set up GIT initial through GITBASH
> git init
> git add --all
> git commit -m "initial commit"
4.	Create new github repo
5.	Run these commands in terminal.
 > git remote add origin https://github.com/AnnaBNana/django_courses.git
 > git push origin master

For me it was shown in git hub as ; git remote add origin https://github.com/ccadenc/Bunnies.git
git push -u origin master
~*~*~*~*~*~*~*~
EC2 intro
(GET AMAZON WEB SERVICES)

1. luanch an amazon EC@ instance
2. connect to our ec2 instance
3. installation
4. point to the IP address of this computer

STEP 3: Creating an EC2 server instance
https://aws.amazon.com/

* Launch EC2 instance
get started

*drop down carrot on "Services" and select EC2
  Ubuntu 16.04
  General purpose t2.micro (second one down)
(review and launch button)
 'edit security groups" on the right.
SSH : source: MyIP (changes every time my IP address changes; home or work)
(add rule button)
HTTP and HTTPS  source "anywhere"

(review and luanch button)

Key pair name: ccadenc
don't save it anywhere might be uploaded to git.
(view instances button)

* If I have more than 1 instance, I will be charged!!
~*~*~*~*~*~*~*
step 4: CONNECTING TO YOUR REMOTE SERVER
GIT BASH to the key folder
> cd desktop/AWS

click "connect" button.

* popup
 use Git Bash
*standalone SSH client

type into Git Bash:
chmod 400 django_pem.pem
ssh -i "ccadenc.pem" ubuntu@ec2-52-14-28-245.us-east-2.compute.amazonaws.com

type yes
~*~*sweeeeet, ubuntu shows that server is working now!*~*~*~*
Step 5: Server Configuration

* in git bash; (type in only the part after the $ sign)
 ubuntu@54.162.31.253:~$ sudo apt-get update
 ubuntu@54.162.31.253:~$ sudo apt-get install python-pip python-dev nginx git

* ubuntu@54.162.31.253:~$ sudo apt-get update
 ubuntu@54.162.31.253:~$ sudo pip install virtualenv

* git clone (TYPE IN GITHUB URL HERE)
ls
cd Bunnies
Make sure manage.py is there.

* virtual environment, and activate it.

 ubuntu@54.162.31.253:~/myRepoName$ virtualenv venv
 ubuntu@54.162.31.253:~/myRepoName$ source venv/bin/activate
 (venv)ubuntu@54.162.31.253:~/myRepoName$ pip install -r requirements.txt
 (venv) ubuntu@54.162.31.253:~/myRepoName$ pip install django bcrypt django-extensions
 (venv) ubuntu@54.162.31.253:~/myRepoName$ pip install gunicorn

~*~*~*~*~*
VIM: terminal based file editor
i -- insert mode
arrow keys to move cursor and edit
esc to exit insert mode.
: to enter the vim command interface
~*~*~*~*~*
 built-in text editor in the terminal to update the code in settings.py. For example:

(venv) ubuntu@54.162.31.253:~/myRepoName$ cd {{projectName}}
(venv) ubuntu@54.162.31.253:~/myRepoName/projectName$ sudo vim settings.py

TO SERVE STATIC CONTENT
# Inside settings.py
# modify these lines
DEBUG = False
ALLOWED_HOSTS = ['{{yourEC2.public.ip}}']
# add the line below to the bottom of the file
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

cd.. to folder that holds manage.py
# Say 'yes' to the dialogue box after typing this next command:
(venv) ubuntu@54.162.31.253:~myRepoName$ python manage.py collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
:wq + return to write (save) and quit.
:q! means quit without saving
:w means save without quitting.

reconnecting to ec2
ssh -i "ccadenc.pem" ubuntu@ec2-52-14-28-245.us-east-2.compute.amazonaws.com
cd Bunnies
source venv/bin/activate

* Run cd .. to get back to the folder that holds manage.py. Make sure your virtual environment is activated!

# Say 'yes' to the dialogue box after typing this next command:
(venv) ubuntu@54.162.31.253:~myRepoName$ python manage.py collectstatic

~*~*~*~*~*~*~*
STEP 7: Gunicorn
(venv) ubuntu@54.162.31.253:~myRepoName$ gunicorn --bind 0.0.0.0:8000 {{projectName}}.wsgi:application
To exit the process ctrl-c

Now, deactivate your virtual environment.
type deactivate

ubuntu@54.162.31.253:~myRepoName$ sudo vim /etc/systemd/system/gunicorn.service

 type i before copying and pasting the lines below, otherwise vim may cut off a few characters at the beginning!

[Unit]
Description=gunicorn daemon
After=network.target
[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/{{repoName}}
ExecStart=/home/ubuntu/{{repoName}}/venv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/{{repoName}}/{{projectName}}.sock {{projectName}}.wsgi:application
[Install]
WantedBy=multi-user.target


myVersion

[Unit]
Description=gunicorn daemon
After=network.target
[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/Bunnies
ExecStart=/home/ubuntu/Bunnies/venv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/Bunnies/LoginRegistration.sock LoginRegistration.wsgi:application
[Install]
WantedBy=multi-user.target

ubuntu@54.162.31.253:~$ sudo systemctl daemon-reload
ubuntu@54.162.31.253:~$ sudo systemctl start gunicorn
ubuntu@54.162.31.253:~$ sudo systemctl enable gunicorn

ubuntu@54.162.31.253:~$ sudo vim /etc/nginx/sites-available/{{projectName}}

server {
  listen 80;
  server_name {{yourEC2.public.ip}};
  location = /favicon.ico { access_log off; log_not_found off; }
  location /static/ {
      root /home/ubuntu/{{myRepoName}};
  }
  location / {
      include proxy_params;
      proxy_pass http://unix:/home/ubuntu/{{myRepoName}}/{{projectName}}.sock;
  }
}

Duplicate (my version)

server {
  listen 80;
  server_name 52.14.28.245;
  location = /favicon.ico { access_log off; log_not_found off; }
  location /static/ {
      root /home/ubuntu/Bunnies;
  }
  location / {
      include proxy_params;
      proxy_pass http://unix:/home/ubuntu/Bunnies/LoginRegistration.sock;
  }
}

esc
:wq

ubuntu@54.162.31.253:~$ sudo ln -s /etc/nginx/sites-available/{{projectName}} /etc/nginx/sites-enabled
ubuntu@54.162.31.253:~$ sudo nginx -t
~*~*~*~*
step 9:
ubuntu@54.162.31.253:~$ sudo rm /etc/nginx/sites-enabled/default
sudo service nginx restart
~*~*~*